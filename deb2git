#!/usr/bin/env python
import hashlib, posixpath, shutil, sys, urllib
from debian_bundle.debfile import DebFile

def die(message):
    print >>sys.stderr, message
    sys.exit(1)

def output_tar_blobs(out, tar, mark):
    ret = {}
    links = {}

    for f in tar:
        if f.issym():
            out.write("blob\nmark :%u\ndata %u\n%s\n" % (mark, len(f.linkname), f.linkname))
            ret[f.name] = (f, mark)
            mark += 1
        elif f.isfile():
            out.write("blob\nmark :%u\ndata %u\n" % (mark, f.size))
            data = tar.extractfile(f)
            shutil.copyfileobj(data, out)
            out.write("\n")
            ret[f.name] = (f, mark)
            mark += 1
        elif f.islnk():
            ret[f.name] = (f, ret[f.linkname][1])
            links[f.name] = links.setdefault(f.linkname, set((f.linkname,)))
            links[f.name].add(f.name)
        else:
            ret[f.name] = (f, None)

    return (mark, ret.values(), links)

def output_commit(out, ref, author, date, files, links):
    out.write("commit %s\n" % ref)
    out.write("committer %s %s\n" % (author, date))
    out.write("data 0\n")

    def process_name(name):
        name = posixpath.normpath(name.replace('\\', r'\\').replace('\n', r'\n').replace('"', r'\"')).lstrip('/')
        equals = 0
        while name[-equals-1] == '=':
            equals += 1
        return name + '='*equals

    for (f, mark) in files:
        name = process_name(f.name)
        if f.isdir():
            pass
        elif f.isfile() or f.islnk():
            if f.mode & 0100:
                mode = "755"
            else:
                mode = "644"
            out.write("M %s :%u %s\n" % (mode, mark, name))
        elif f.issym():
            out.write("M 120000 :%u %s\n" % (mark, name))
        else:
            die('.deb contains member "%s" which does not have type dir, file, hardlink, or symlink.' % f.name)

        if f.name in links:
            hasher = hashlib.sha1()
            for link in sorted(links[f.name]):
                hasher.update(link + '\0')
            linkhash = " " + hasher.hexdigest()
        else:
            linkhash = ""

        metadata = "%o %u %u %s %s %u%s\n" % (f.mode, f.uid, f.gid, f.uname, f.gname, f.mtime, linkhash)
        if f.isdir():
            if name == '.':
                name = ''
            else:
                name += '/'
        out.write("M 644 inline %s=\ndata %u\n%s\n" % (name, len(metadata), metadata))

def output_deb(filename):
    try:
        deb = DebFile(filename)
    except Exception, e:
        die(str(e))

    try:
        control = deb.debcontrol()
        package = control["Package"]
        version = urllib.quote(control["Version"])
        arch = control["Architecture"]
        author = "deb2git <deb2git@example.org>"
        date = "745506337 +0000"
    except Exception, e:
        die("Error parsing package metadata from control and changelog: %s" % str(e))

    (mark, control_files, control_links) = output_tar_blobs(sys.stdout, deb.control.tgz(), 1)
    output_commit(sys.stdout,
                  "refs/heads/%s_%s_%s_control" % (package, version, arch),
                  author, date, control_files, control_links)

    (mark, data_files, data_links) = output_tar_blobs(sys.stdout, deb.data.tgz(), 1)
    output_commit(sys.stdout,
                  "refs/heads/%s_%s_%s_data" % (package, version, arch),
                  author, date, data_files, data_links)

def main(args):
    if len(args) != 2:
        die("Usage: deb2git package.deb | git fast-import")

    output_deb(args[1])

if __name__ == '__main__': sys.exit(main(sys.argv))
